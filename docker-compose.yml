version: '3'

networks:
  # enable connection with Traefik
  traefik:
    external: true

services:
  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    volumes:
      - /opt/jellyfin:/config
      - /media/data:/data
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    restart: unless-stopped
    labels:
      # The labels are usefull for Traefik only
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.emby.rule=Host(`jellyfin.aur3lex.fr`)"
      - "traefik.http.routers.emby.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.emby.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.emby-secured.rule=Host(`jellyfin.aur3lex.fr`)"
      - "traefik.http.routers.emby-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.emby-secured.tls=true"
      - "traefik.http.routers.emby-secured.tls.certresolver=myhttpchallenge"
      - "traefik.http.services.emby.loadbalancer.server.port=8096"
    restart: unless-stopped
    networks:
      - traefik

  vpn:
    container_name: vpn
    image: azinchen/nordvpn:latest
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    environment:
      - USER=benoit.pierrat@outlook.fr
      - PASS=spliiitNordVpn469
      - COUNTRY=France
      - GROUP=P2P
      #- GROUP=Standard VPN servers
      - RANDOM_TOP=10
      - RECREATE_VPN_CRON=5 */3 * * *
      - NETWORK=192.168.1.0/24 #;192.168.2.0/24
      - OPENVPN_OPTS=--mute-replay-warnings
    ports:
      - 1401:80
      - 5000:5000
      - 51413:51413
      - 6881:6881/udp
    restart: unless-stopped

  rutorrent:
    image: ghcr.io/linuxserver/rutorrent
    container_name: rutorrent
    environment:
      - PUID=1000
      - PGID=1000
    volumes:
      - /opt/rutorrent:/config
      - /media/data:/downloads
    restart: unless-stopped
    network_mode: service:vpn
    depends_on:
      - vpn

  jackett:
    image: lscr.io/linuxserver/jackett
    container_name: jackett
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - AUTO_UPDATE=true #optional
      #- RUN_OPTS=<run options here> #optional
    volumes:
      - /opt/jackett:/config
      - /media/data:/downloads
    networks:
      - traefik
    ports:
      - 9117:9117
    restart: unless-stopped
    labels:
      # The labels are usefull for Traefik only
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.jackett.rule=Host(`jackett.aur3lex.fr`)"
      - "traefik.http.routers.jackett.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.jackett.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.jackett-secured.rule=Host(`jackett.aur3lex.fr`)"
      - "traefik.http.routers.jackett-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.jackett-secured.tls=true"
      - "traefik.http.routers.jackett-secured.tls.certresolver=myhttpchallenge"

  sonarr:
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /opt/sonarr:/config
      - /media/data:/downloads #optional
    ports:
      - 8989:8989
    restart: unless-stopped
    networks:
      - traefik
    labels:
      # The labels are usefull for Traefik only
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.aur3lex.fr`)"
      - "traefik.http.routers.sonarr.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.sonarr.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.sonarr-secured.rule=Host(`sonarr.aur3lex.fr`)"
      - "traefik.http.routers.sonarr-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.sonarr-secured.tls=true"
      - "traefik.http.routers.sonarr-secured.tls.certresolver=myhttpchallenge"

  radarr:
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /opt/radarr:/config
      - /media/data:/downloads #optional
    ports:
      - 7878:7878
    restart: unless-stopped
    networks:
      - traefik
    labels:
      # The labels are usefull for Traefik only
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Get the routes from http
      - "traefik.http.routers.radarr.rule=Host(`radarr.aur3lex.fr`)"
      - "traefik.http.routers.radarr.entrypoints=web"
      # Redirect these routes to https
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.radarr.middlewares=redirect-to-https@docker"
      # Get the routes from https
      - "traefik.http.routers.radarr-secured.rule=Host(`radarr.aur3lex.fr`)"
      - "traefik.http.routers.radarr-secured.entrypoints=web-secure"
      # Apply autentificiation with http challenge
      - "traefik.http.routers.radarr-secured.tls=true"
      - "traefik.http.routers.radarr-secured.tls.certresolver=myhttpchallenge"

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Europe/Paris
    ports:
      - "${PORT:-8191}:8191"
    restart: unless-stopped
    networks:
      - traefik
